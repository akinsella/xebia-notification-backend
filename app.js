// Generated by CoffeeScript 1.6.3
var ECT, MongoStore, allowCrossDomain, app, auth, cacheMiddleware, client, config, device, ectRenderer, express, fs, gracefullyClosing, httpServer, login, mongo, notification, oauth2, passport, path, requestLogger, route, security, site, user, util, utils;

fs = require('fs');

path = require('path');

util = require('util');

express = require('express');

MongoStore = require('connect-mongo')(express);

mongo = require('./lib/mongo');

passport = require('passport');

login = require('connect-ensure-login');

requestLogger = require('./lib/requestLogger');

allowCrossDomain = require('./lib/allowCrossDomain');

utils = require('./lib/utils');

security = require('./lib/security');

config = require('./conf/config');

route = require('./route');

auth = require('./route/auth');

device = require('./route/device');

notification = require('./route/notification');

client = require('./route/client');

user = require('./route/user');

site = require('./route/site');

oauth2 = require('./oauth2');

ECT = require('ect');

ectRenderer = ECT({
  cache: true,
  watch: true,
  root: "views"
});

console.log("Application Name: " + config.appname);

console.log("Env: " + (JSON.stringify(config)));

require('./auth');

app = express();

gracefullyClosing = false;

cacheMiddleware = function(seconds) {
  return function(req, res, next) {
    res.setHeader("Cache-Control", "public, max-age=" + seconds);
    return next();
  };
};

app.configure(function() {
  console.log("Environment: " + (app.get('env')));
  app.set('port', config.port || process.env.PORT || 9090);
  app.set('views', "" + __dirname + "/views");
  app.set('view engine', 'ect');
  app.engine('.ect', ectRenderer.render);
  app.use(function(req, res, next) {
    if (!gracefullyClosing) {
      return next();
    }
    res.setHeader("Connection", "close");
    return res.send(502, "Server is in the process of restarting");
  });
  app.use(function(req, res, next) {
    req.forwardedSecure = req.headers["x-forwarded-proto"] === "https";
    return next();
  });
  app.use('/images', express["static"]("" + __dirname + "/public/images"));
  app.use('/scripts', express["static"]("" + __dirname + "/public/scripts"));
  app.use('/styles', express["static"]("" + __dirname + "/public/styles"));
  app.use(express.favicon());
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(express.session({
    secret: process.env.SECRET,
    maxAge: new Date(Date.now() + 3600000),
    store: new MongoStore({
      db: config.mongo.dbname,
      host: config.mongo.hostname,
      port: config.mongo.port,
      username: config.mongo.username,
      password: config.mongo.password,
      collection: "sessions",
      auto_reconnect: true
    })
  }));
  app.use(express.logger());
  app.use(express.methodOverride());
  app.use(allowCrossDomain());
  app.use(requestLogger());
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(app.router);
  return app.use(function(err, req, res, next) {
    console.error("Error: " + err + ", Stacktrace: " + err.stack);
    return res.send(500, "Something broke! Error: " + err + ", Stacktrace: " + err.stack);
  });
});

app.configure('development', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

app.configure('production', function() {
  return app.use(express.errorHandler());
});

app.get('/', route.index);

app["delete"]('/api/device/:id', device.removeById);

app.post('/api/device', device.create);

app.get('/api/device/list', device.list);

app.get('/api/device/:id', device.findById);

app["delete"]('/api/client/:id', client.removeById);

app.post('/api/client', client.create);

app.get('/api/client/list', client.list);

app.get('/api/client/:id', client.findById);

app["delete"]('/api/user/:id', user.removeById);

app.post('/api/user', user.create);

app.get('/api/user/list', user.list);

app.get('/api/user/:id', user.findById);

app["delete"]('/api/notification', notification.removeById);

app.post('/api/notification', notification.create);

app.get('/api/notification/list', notification.list);

app.get('/api/notification/:id', notification.findById);

app.get('api/notification/push', notification.push);

app.get('/api/user/me', passport.authenticate("bearer", {
  session: false
}), user.me);

app.get('/', site.index);

app.get('/login', site.loginForm);

app.post('/login', site.login);

app.get('/logout', site.logout);

app.get('/account', login.ensureLoggedIn(), site.account);

app.get('/dialog/authorize', oauth2.authorization);

app.post('/dialog/authorize/decision', oauth2.decision);

app.post('/oauth/token', oauth2.token);

app.get('/auth/account', security.ensureAuthenticated, auth.account);

app.get('/auth/login', auth.login);

app.get('/auth/google', passport.authenticate('google', {
  failureRedirect: '/login'
}), auth.authGoogle);

app.get('/auth/google/callback', passport.authenticate('google', {
  failureRedirect: '/login'
}), auth.authGoogleCallback);

app.get('/auth/logout', auth.logout);

httpServer = app.listen(app.get('port'));

process.on('SIGTERM', function() {
  console.log("Received kill signal (SIGTERM), shutting down gracefully.");
  gracefullyClosing = true;
  httpServer.close(function() {
    console.log("Closed out remaining connections.");
    return process.exit();
  });
  return setTimeout(function() {
    console.error("Could not close connections in time, forcefully shutting down");
    return process.exit(1);
  }, 30 * 1000);
});

process.on('uncaughtException', function(err) {
  console.error("An uncaughtException was found, the program will end. " + err + ", stacktrace: " + err.stack);
  return process.exit(1);
});

console.log("Express listening on port: " + (app.get('port')));
