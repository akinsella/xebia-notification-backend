// Generated by CoffeeScript 1.6.3
var Device, Notification, apn, apnConnection, create, feedback, findById, list, push, removeById, utils, _;

utils = require('../lib/utils');

_ = require('underscore')._;

apn = require('apn');

Device = require("../model/device");

Notification = require("../model/notification");

apnConnection = new apn.Connection({
  "gateway": "gateway.sandbox.push.apple.com"
});

feedback = new apn.Feedback({
  "batchFeedback": true,
  "interval": 300
});

feedback.on("feedback", function(devices) {
  return _(devices).each(function(device) {
    console.log("Received feedback for deletion on timestamp: " + device.time + " for device with token " + device.token);
    return Device.findOneAndRemove({
      token: device.token
    }, function(err) {
      if (err) {
        return console.log("Could not remove device with token: " + device.token + ".");
      } else {
        return console.log("Removed device with token: " + device.token);
      }
    });
  });
});

push = function(req, res) {
  return Notification.findOne({
    id: req.params.id
  }, function(err, notification) {
    if (err) {
      return utils.responseData(500, "Error: " + err, "{}", {
        req: req,
        res: res
      });
    } else {
      return Device.find({}, function(err, devices) {
        if (err) {
          return utils.responseData(500, "Error: " + err, "{}", {
            req: req,
            res: res
          });
        } else {
          _(devices).each(function(device) {
            var apnDevice, apnNotification;
            apnDevice = new apn.Device(device.token);
            apnNotification = new apn.Notification();
            apnNotification.expiry = Math.floor(Date.now() / 1000) + 3600;
            apnNotification.payload = notification.message;
            return apnConnection.pushNotification(apnNotification, apnDevice);
          });
          return utils.responseData(200, "Ok", "{}", {
            req: req,
            res: res
          });
        }
      });
    }
  });
};

list = function(req, res) {
  return Notification.find({}, function(err, notifications) {
    utils.responseData(200, void 0, notifications, {
      req: req,
      res: res
    });
  });
};

findById = function(req, res) {
  return Notification.findOne({
    id: req.params.id
  }, function(err, notification) {
    if (notification) {
      utils.responseData(200, void 0, notification, {
        req: req,
        res: res
      });
    } else {
      utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

removeById = function(req, res) {
  return Notification.findOneAndRemove({
    id: req.params.id
  }, function(err, notification) {
    if (notification) {
      utils.responseData(204, void 0, notification, {
        req: req,
        res: res
      });
    } else {
      utils.responseData(404, "Not Found", void 0, {
        req: req,
        res: res
      });
    }
  });
};

create = function(req, res) {
  var notification;
  notification = new Notification(req.body);
  return notification.save(function(err) {
    if (err) {
      utils.responseData(500, "Could not save notification", req.body, {
        req: req,
        res: res
      });
    } else {
      utils.responseData(201, "Created", notification, {
        req: req,
        res: res
      });
    }
  });
};

module.exports = {
  push: push,
  list: list,
  findById: findById,
  create: create,
  removeById: removeById
};
